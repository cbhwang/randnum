
from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit, Aer, execute

# n is the number of Qubits needed to generate a random number between n and 2^n-1
n=3

# creating a Quantum register with n Qubits and n classical bits where n=3
q = QuantumRegister(n)
c = ClassicalRegister(n)
circuit= QuantumCircuit(q,c)

# appling a Hadamard Gate on the n Qubits to get a final itstring of size n
for i in range(n):
  circuit.h(q[i])
  
circuit.measure(q,c)
print(circuit)

# connecting the backend (a simulator or real Quantum machine) to run the circuit
simulator=Aer.get_backend('qasm_simulator')
job=execute(circuit,simulator)

# the output bitstring consists of a 3 collapsed Qubits
result=job.result()
#print(result)
output=result.get_counts()
print(output)
#print(output.keys())
#print(list(output.keys()))
#bitstring=list(output.keys())[0]

#result chosen with the highest probability
bitstring=max(output,key=lambda k:output[k])
print(bitstring)

# converting binary to decimal integers
random_integer=int(bitstring,2)
print(random_integer)
